/// <reference types="node" />
import { AdminWebsocket, AppAgentWebsocket, AppBundleSource, AppWebsocket, AttachAppInterfaceRequest, InstalledAppId } from "@holochain/client";
import { URL } from "node:url";
import { TryCpServer } from "../trycp/trycp-server.js";
import { AgentApp, AgentsAppsOptions, AppOptions, IConductor } from "../types.js";
/**
 * The network type the conductor should use to communicate with peers.
 *
 * @public
 */
export declare enum NetworkType {
    Quic = "quic",
    Mdns = "mdns"
}
/**
 * @public
 */
export interface ConductorOptions {
    /**
     * Start up conductor after creation.
     *
     * @defaultValue true
     */
    startup?: boolean;
    /**
     * Attach an app interface to the conductor and connect an app websocket
     * to it.
     *
     * @defaultValue true
     */
    attachAppInterface?: boolean;
    /**
     * The network type the conductor should use
     *
     * @defaultValue quic
     */
    networkType?: NetworkType;
    /**
     * A bootstrap service URL for peers to discover each other
     */
    bootstrapUrl?: URL;
    /**
     * Network interface and port to bind to
     *
     * @defaultValue "kitsune-quic://0.0.0.0:0"
     */
    bindTo?: URL;
    /**
     * Run through an external proxy
     */
    proxy?: URL;
    /**
     * If you have port-forwarding set up or wish to apply a vanity domain name,
     * you may need to override the local IP.
     *
     * @defaultValue undefined = no override
     */
    hostOverride?: URL;
    /**
     * If you have port-forwarding set up, you may need to override the local
     * port.
     *
     * @defaultValue undefined = no override
     */
    portOverride?: number;
    /**
     * Timeout for requests to Admin and App API
     */
    timeout?: number;
}
/**
 * Options for using the conductor factory.
 *
 * @public
 */
export type CreateConductorOptions = Pick<ConductorOptions, "bindTo" | "bootstrapUrl" | "hostOverride" | "networkType" | "portOverride" | "proxy" | "timeout">;
/**
 * The function to create a conductor. It starts a sandbox conductor via the
 * Holochain CLI.
 *
 * @returns A conductor instance.
 *
 * @public
 */
export declare const createConductor: (options?: ConductorOptions) => Promise<Conductor>;
/**
 * A class to manage a conductor running on localhost.
 *
 * @public
 */
export declare class Conductor implements IConductor {
    private conductorProcess;
    private conductorDir;
    private adminApiUrl;
    private appApiUrl;
    private _adminWs;
    private _appWs;
    private _appAgentWs;
    private readonly timeout;
    private constructor();
    /**
     * Factory to create a conductor.
     *
     * @returns A configured instance of a conductor, not yet running.
     */
    static create(options?: CreateConductorOptions): Promise<Conductor>;
    /**
     * Start the conductor and establish a web socket connection to the Admin
     * API.
     */
    startUp(): Promise<void>;
    /**
     * Close Admin and App API connections and kill the conductor process.
     */
    shutDown(): Promise<number | null>;
    private connectAdminWs;
    /**
     * Attach a web socket to the App API.
     *
     * @param request - Specify a port for the web socket (optional).
     */
    attachAppInterface(request?: AttachAppInterfaceRequest): Promise<void>;
    /**
     * Connect a web socket to the App API.
     */
    connectAppInterface(): Promise<void>;
    /**
     * Connect a web socket for a specific app to the App API.
     */
    connectAppAgentInterface(appId: InstalledAppId): Promise<void>;
    private setUpImplicitZomeCallSigning;
    /**
     * Get the path of the directory that contains all files and folders of the
     * conductor.
     *
     * @returns The conductor's temporary directory.
     */
    getTmpDirectory(): string;
    /**
     * Get all Admin API methods.
     *
     * @returns The Admin API web socket.
     */
    adminWs(): AdminWebsocket;
    /**
     * Get all App API methods.
     *
     * @returns The App API web socket.
     */
    appWs(): AppWebsocket;
    /**
     * Get all App API methods of a specific app.
     *
     * @returns The app agent web socket.
     */
    appAgentWs(): AppAgentWebsocket;
    /**
     * Install an application into the conductor.
     *
     * @param appBundleSource - The bundle or path to the bundle.
     * @param options - {@link AppOptions} for the hApp bundle (optional).
     * @returns An agent app with cells and conductor handle.
     */
    installApp(appBundleSource: AppBundleSource, options?: AppOptions): Promise<AgentApp>;
    /**
     * Install an app for multiple agents into the conductor.
     */
    installAgentsApps(options: AgentsAppsOptions): Promise<AgentApp[]>;
}
/**
 * Run the `hc` command to delete all conductor data.
 *
 * @returns A promise that resolves when the command is complete.
 *
 * @public
 */
export declare const cleanAllConductors: () => Promise<void>;
/**
 * Shortcut function to stop all TryCP servers.
 *
 * @public
 */
export declare const stopAllTryCpServers: (tryCpServers: TryCpServer[]) => Promise<void[]>;
