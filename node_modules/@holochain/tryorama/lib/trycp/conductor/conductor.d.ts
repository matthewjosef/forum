/// <reference types="node" />
/// <reference types="node" />
import { AddAgentInfoRequest, AgentInfoRequest, AgentPubKey, AppBundleSource, AppInfoRequest, AppSignalCb, AttachAppInterfaceRequest, CallZomeRequest, CallZomeRequestSigned, CapSecret, CellId, CreateCloneCellRequest, DeleteCloneCellRequest, DisableAppRequest, DisableCloneCellRequest, DnaDefinition, DnaHash, DnaSource, DumpFullStateRequest, DumpStateRequest, EnableAppRequest, EnableCloneCellRequest, FullStateDump, GetDnaDefinitionRequest, GrantedFunctions, GrantZomeCallCapabilityRequest, InstallAppRequest, ListAppsRequest, RegisterDnaRequest, StartAppRequest, UninstallAppRequest } from "@holochain/client";
import { URL } from "node:url";
import { AgentApp, AgentsAppsOptions, AppOptions, IConductor } from "../../types.js";
import { TryCpClient, TryCpConductorLogLevel } from "../index.js";
/**
 * The default partial config for a TryCP conductor.
 *
 * @public
 */
export declare const DEFAULT_PARTIAL_PLAYER_CONFIG = "signing_service_uri: ~\nencryption_service_uri: ~\ndecryption_service_uri: ~\ndpki: ~\nnetwork: ~";
/**
 * @public
 */
export type ConductorId = string;
/**
 * @public
 */
export interface TryCpConductorOptions {
    /**
     * Identifier for the conductor (optional).
     */
    id?: ConductorId;
    /**
     * Configuration for the conductor (optional).
     */
    partialConfig?: string;
    /**
     * Start up conductor after creation.
     *
     * default: true
     */
    startup?: boolean;
    /**
     * Log level of the conductor (optional).
     *
     * default: "info"
     */
    logLevel?: TryCpConductorLogLevel;
}
/**
 * The function to create a TryCP Conductor. By default configures and starts
 * it.
 *
 * @param tryCpClient - The client connection to the TryCP server on which to
 * create the conductor.
 * @returns A conductor instance.
 *
 * @public
 */
export declare const createTryCpConductor: (tryCpClient: TryCpClient, options?: TryCpConductorOptions) => Promise<TryCpConductor>;
/**
 * A class to manage a conductor running on a TryCP server.
 *
 * @public
 */
export declare class TryCpConductor implements IConductor {
    readonly id: string;
    private appInterfacePort;
    readonly tryCpClient: TryCpClient;
    constructor(tryCpClient: TryCpClient, id?: ConductorId);
    /**
     * Create conductor configuration.
     *
     * @param partialConfig - The configuration to add to the default configuration.
     * @returns An empty success response.
     */
    configure(partialConfig?: string): Promise<null>;
    /**
     * Start a configured conductor.
     *
     * @param options - Log level of the conductor. Defaults to "info".
     * @returns An empty success response.
     *
     * @public
     */
    startUp(options?: {
        logLevel?: TryCpConductorLogLevel;
    }): Promise<null>;
    /**
     * Disconnect app interface and shut down the conductor.
     *
     * @returns An empty success response.
     *
     * @public
     */
    shutDown(): Promise<null>;
    /**
     * Disconnect the TryCP client from the TryCP server.
     *
     * @returns The web socket close code.
     */
    disconnectClient(): Promise<number>;
    /**
     * Download a DNA from a URL to the server's file system.
     *
     * @returns The relative path to the downloaded DNA file.
     */
    downloadDna(url: URL): Promise<string>;
    /**
     * Upload a DNA file from the local file system to the server.
     *
     * @param dnaContent - The DNA as binary content.
     * @returns The relative path to the saved DNA file.
     */
    saveDna(dnaContent: Buffer): Promise<string>;
    /**
     * Connect a web socket to the App API.
     *
     * @returns An empty success response.
     */
    connectAppInterface(signalHandler?: AppSignalCb): Promise<null>;
    /**
     * Disconnect the web socket from the App API.
     *
     * @returns An empty success response.
     */
    disconnectAppInterface(): Promise<null>;
    /**
     * Attach a signal handler.
     *
     * @param signalHandler - The signal handler to register.
     */
    on(signalHandler: AppSignalCb): void;
    /**
     * Detach the registered signal handler.
     */
    off(): void;
    /**
     * Send a call to the Admin API.
     *
     * @param message - The call to send to the Admin API.
     * @returns The response of the call.
     *
     * @internal
     */
    private callAdminApi;
    /**
     * Get all
     * {@link https://github.com/holochain/holochain-client-js/blob/develop/docs/API_adminwebsocket.md | Admin API methods}
     * of the Holochain client.
     *
     * @returns The Admin API web socket.
     */
    adminWs(): {
        addAgentInfo: (request: AddAgentInfoRequest) => Promise<void>;
        agentInfo: (req: AgentInfoRequest) => Promise<import("@holochain/client").AgentInfoResponse>;
        attachAppInterface: (request?: AttachAppInterfaceRequest) => Promise<{
            port: number;
        }>;
        authorizeSigningCredentials: (cellId: CellId, functions?: GrantedFunctions) => Promise<void>;
        deleteCloneCell: (request: DeleteCloneCellRequest) => Promise<void>;
        disableApp: (request: DisableAppRequest) => Promise<null>;
        dumpFullState: (request: DumpFullStateRequest) => Promise<FullStateDump>;
        dumpState: (request: DumpStateRequest) => Promise<[FullStateDump, string]>;
        enableApp: (request: EnableAppRequest) => Promise<import("@holochain/client").EnableAppResponse>;
        generateAgentPubKey: () => Promise<AgentPubKey>;
        getDnaDefinition: (dnaHash: GetDnaDefinitionRequest) => Promise<DnaDefinition>;
        grantSigningKey: (cellId: CellId, functions: GrantedFunctions, signingKey: AgentPubKey) => Promise<CapSecret>;
        grantZomeCallCapability: (request: GrantZomeCallCapabilityRequest) => Promise<void>;
        installApp: (data: InstallAppRequest) => Promise<import("@holochain/client").AppInfo>;
        listAppInterfaces: () => Promise<import("@holochain/client").ListAppInterfacesResponse>;
        listApps: (request: ListAppsRequest) => Promise<import("@holochain/client").ListAppsResponse>;
        listCellIds: () => Promise<import("@holochain/client").ListCellIdsResponse>;
        listDnas: () => Promise<import("@holochain/client").ListDnasResponse>;
        registerDna: (request: RegisterDnaRequest & DnaSource) => Promise<DnaHash>;
        startApp: (request: StartAppRequest) => Promise<boolean>;
        uninstallApp: (request: UninstallAppRequest) => Promise<null>;
    };
    /**
     * Call to the conductor's App API.
     */
    private callAppApi;
    /**
     * Get all
     * {@link https://github.com/holochain/holochain-client-js/blob/develop/docs/API_appwebsocket.md | App API methods}
     * of the Holochain client.
     *
     * @returns The App API web socket.
     */
    appWs(): {
        appInfo: (request: AppInfoRequest) => Promise<import("@holochain/client").AppInfo>;
        callZome: <T>(request: CallZomeRequest | CallZomeRequestSigned) => Promise<T>;
        createCloneCell: (request: CreateCloneCellRequest) => Promise<import("@holochain/client").ClonedCell>;
        enableCloneCell: (request: EnableCloneCellRequest) => Promise<import("@holochain/client").ClonedCell>;
        disableCloneCell: (request: DisableCloneCellRequest) => Promise<void>;
    };
    /**
     * Install a hApp bundle into the conductor.
     *
     * @param appBundleSource - The bundle or path to the bundle.
     * @param options - {@link AppOptions} for the hApp bundle (optional).
     * @returns A hApp for the agent.
     */
    installApp(appBundleSource: AppBundleSource, options?: AppOptions): Promise<AgentApp>;
    /**
     * Install a hApp bundle into the conductor.
     *
     * @param options - Apps to install for each agent, with agent pub keys etc.
     * (optional).
     * @returns A hApp for the agent.
     */
    installAgentsApps(options: AgentsAppsOptions): Promise<AgentApp[]>;
}
