import { SignalType } from "@holochain/client";
import msgpack from "@msgpack/msgpack";
import assert from "node:assert";
/**
 * Deserialize the binary response from TryCP
 *
 * @param response - The response to deserialize.
 * @returns The deserialized response.
 *
 * @internal
 */
export const deserializeTryCpResponse = (response) => {
    const decodedData = msgpack.decode(response);
    assertIsResponseWrapper(decodedData);
    return decodedData;
};
/**
 * Deserialize a binary signal from TryCP
 *
 * @param signal - The signal to deserialize.
 * @returns The deserialized signal.
 */
export const deserializeTryCpSignal = (signal) => {
    const deserializedSignal = msgpack.decode(signal);
    assertIsSignal(deserializedSignal);
    if (SignalType.App in deserializedSignal) {
        const { [SignalType.App]: { cell_id, signal: payload, zome_name }, } = deserializedSignal;
        const decodedPayload = msgpack.decode(payload);
        return { cell_id, payload: decodedPayload, zome_name };
    }
    else {
        throw new Error("Receiving system signals is not implemented yet");
        // const { [SignalType.System]: signal } = deserializedSignal;
        // return signal;
    }
};
/**
 * Deserialize the binary response from the Admin or App API
 *
 * @param response - The response to deserialize.
 * @returns The deserialized response.
 *
 * @internal
 */
export const deserializeApiResponse = (response) => {
    const decodedResponse = msgpack.decode(response);
    assertIsApiResponse(decodedResponse);
    const decodedAdminApiResponse = decodedResponse;
    return decodedAdminApiResponse;
};
/**
 * Deserialize the App API response's payload
 *
 * @param payload - The payload to deserialize.
 * @typeParam P - The type of the response's payload.
 * @returns The deserialized payload.
 *
 * @internal
 */
export const deserializeZomeResponsePayload = (payload) => {
    const deserializedPayload = msgpack.decode(payload);
    return deserializedPayload;
};
function assertIsResponseWrapper(response) {
    assert(response !== null &&
        typeof response === "object" &&
        "type" in response &&
        // responses contain "id" and "response"
        (("id" in response && "response" in response) ||
            //and signals contain "port" and "data"
            ("port" in response && "data" in response)));
}
function assertIsApiResponse(response) {
    assert(response && typeof response === "object" && "type" in response);
}
function assertIsSignal(signal) {
    assert(signal &&
        typeof signal === "object" &&
        (SignalType.App in signal || SignalType.System in signal));
}
