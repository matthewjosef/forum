/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import '@material/mwc-ripple/mwc-ripple.js';
import { FormElement } from '@material/mwc-base/form-element.js';
import { Ripple } from '@material/mwc-ripple/mwc-ripple.js';
import { RippleHandlers } from '@material/mwc-ripple/ripple-handlers.js';
import { MDCSliderFoundation } from '@material/slider/foundation.js';
import { TickMark } from '@material/slider/types.js';
import { nothing, PropertyValues, TemplateResult } from 'lit';
export { Thumb } from '@material/slider/types.js';
export declare class SliderBase extends FormElement {
    protected mdcFoundation: MDCSliderFoundation;
    protected readonly mdcFoundationClass: typeof MDCSliderFoundation;
    protected formElement: HTMLInputElement;
    protected mdcRoot: HTMLElement;
    protected endThumb: HTMLElement;
    protected endThumbKnob: HTMLElement;
    protected endValueIndicatorContainer: HTMLElement;
    protected endRipple: Promise<Ripple | null>;
    disabled: boolean;
    min: number;
    max: number;
    valueEnd: number;
    name: string;
    step: number;
    withTickMarks: boolean;
    discrete: boolean;
    protected tickMarks: TickMark[];
    protected trackTransformOriginStyle: string;
    protected trackLeftStyle: string;
    protected trackRightStyle: string;
    protected trackTransitionStyle: string;
    protected endThumbWithIndicator: boolean;
    protected endThumbTop: boolean;
    protected shouldRenderEndRipple: boolean;
    protected endThumbTransformStyle: string;
    protected endThumbTransitionStyle: string;
    protected endThumbCssProperties: {
        [key: string]: string;
    };
    /** @soyPrefixAttribute */
    ariaLabel: string;
    /** @soyPrefixAttribute */
    ariaLabelledBy: string;
    /** @soyPrefixAttribute */
    ariaDescribedBy: string;
    valueToAriaTextTransform: ((value: number) => string) | null;
    valueToValueIndicatorTransform: ((value: number) => string);
    private boundMoveListener;
    protected endRippleHandlers: RippleHandlers;
    update(changed: PropertyValues): void;
    protected render(): TemplateResult<1>;
    protected renderRootEl(content: TemplateResult): TemplateResult<1>;
    protected renderStartInput(): typeof nothing | TemplateResult;
    protected renderEndInput(): TemplateResult<1>;
    protected renderTrack(): typeof nothing | TemplateResult;
    protected renderTickMarks(): typeof nothing | TemplateResult<1>;
    protected renderStartThumb(): typeof nothing | TemplateResult;
    protected renderEndThumb(): TemplateResult<1>;
    protected renderValueIndicator(text: string | number | null): typeof nothing | TemplateResult<1>;
    disconnectedCallback(): void;
    protected createAdapter(): void;
    firstUpdated(): Promise<void>;
    updated(changed: PropertyValues): void;
    layout(skipUpdateUI?: boolean): Promise<void>;
    protected onEndChange(e: Event): void;
    protected onEndFocus(): void;
    protected onEndBlur(): void;
    protected onEndMouseenter(): void;
    protected onEndMouseleave(): void;
    protected onPointerdown(e: PointerEvent): void;
    protected onPointerup(): void;
    protected onContextmenu(e: Event): void;
    protected setFormData(formData: FormData): void;
}
