/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { __decorate } from "tslib";
// Style preference for leading underscores.
// tslint:disable:strip-private-property-underscore
import '@material/mwc-ripple/mwc-ripple.js';
import { ariaProperty } from '@material/mwc-base/aria-property.js';
import { FormElement } from '@material/mwc-base/form-element.js';
import { RippleHandlers } from '@material/mwc-ripple/ripple-handlers.js';
import { MDCSliderFoundation } from '@material/slider/foundation.js';
import { Thumb, TickMark } from '@material/slider/types.js';
import { html, nothing } from 'lit';
import { property, query, queryAsync, state } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { styleMap } from 'lit/directives/style-map.js';
export { Thumb } from '@material/slider/types.js';
export class SliderBase extends FormElement {
    constructor() {
        super(...arguments);
        this.mdcFoundationClass = MDCSliderFoundation;
        this.disabled = false;
        this.min = 0;
        this.max = 100;
        this.valueEnd = 0;
        this.name = '';
        this.step = 1;
        this.withTickMarks = false;
        this.discrete = false;
        this.tickMarks = [];
        this.trackTransformOriginStyle = '';
        this.trackLeftStyle = '';
        this.trackRightStyle = '';
        this.trackTransitionStyle = '';
        this.endThumbWithIndicator = false;
        this.endThumbTop = false;
        this.shouldRenderEndRipple = false;
        this.endThumbTransformStyle = '';
        this.endThumbTransitionStyle = '';
        this.endThumbCssProperties = {};
        this.valueToAriaTextTransform = null;
        this.valueToValueIndicatorTransform = (value) => {
            return `${value}`;
        };
        this.boundMoveListener = null;
        this.endRippleHandlers = new RippleHandlers(() => {
            this.shouldRenderEndRipple = true;
            return this.endRipple;
        });
    }
    update(changed) {
        if (changed.has('valueEnd') && this.mdcFoundation) {
            this.mdcFoundation.setValue(this.valueEnd);
            const validVal = this.mdcFoundation.getValue();
            if (validVal !== this.valueEnd) {
                this.valueEnd = validVal;
            }
        }
        if (changed.has('discrete')) {
            if (!this.discrete) {
                this.tickMarks = [];
            }
        }
        super.update(changed);
    }
    render() {
        return this.renderRootEl(html `
      ${this.renderStartInput()}
      ${this.renderEndInput()}
      ${this.renderTrack()}
      ${this.renderTickMarks()}
      ${this.renderStartThumb()}
      ${this.renderEndThumb()}`);
    }
    renderRootEl(content) {
        const rootClasses = classMap({
            'mdc-slider--disabled': this.disabled,
            'mdc-slider--discrete': this.discrete,
        });
        return html `
    <div
        class="mdc-slider ${rootClasses}"
        @pointerdown=${this.onPointerdown}
        @pointerup=${this.onPointerup}
        @contextmenu=${this.onContextmenu}>
      ${content}
    </div>`;
    }
    renderStartInput() {
        return nothing;
    }
    renderEndInput() {
        var _a;
        return html `
      <input
          class="mdc-slider__input end"
          type="range"
          step=${this.step}
          min=${this.min}
          max=${this.max}
          .value=${this.valueEnd}
          @change=${this.onEndChange}
          @focus=${this.onEndFocus}
          @blur=${this.onEndBlur}
          ?disabled=${this.disabled}
          name=${this.name}
          aria-label=${ifDefined(this.ariaLabel)}
          aria-labelledby=${ifDefined(this.ariaLabelledBy)}
          aria-describedby=${ifDefined(this.ariaDescribedBy)}
          aria-valuetext=${ifDefined((_a = this.valueToAriaTextTransform) === null || _a === void 0 ? void 0 : _a.call(this, this.valueEnd))}>
    `;
    }
    renderTrack() {
        return nothing;
    }
    renderTickMarks() {
        return !this.withTickMarks ? nothing : html `
      <div class="mdc-slider__tick-marks">
        ${this.tickMarks.map((tickMark) => {
            const isActive = tickMark === TickMark.ACTIVE;
            return html `<div class="${isActive ? 'mdc-slider__tick-mark--active' :
                'mdc-slider__tick-mark--inactive'}"></div>`;
        })}
      </div>`;
    }
    renderStartThumb() {
        return nothing;
    }
    renderEndThumb() {
        const endThumbClasses = classMap({
            'mdc-slider__thumb--with-indicator': this.endThumbWithIndicator,
            'mdc-slider__thumb--top': this.endThumbTop,
        });
        const endThumbStyles = styleMap(Object.assign({ '-webkit-transform': this.endThumbTransformStyle, 'transform': this.endThumbTransformStyle, '-webkit-transition': this.endThumbTransitionStyle, 'transition': this.endThumbTransitionStyle, 'left': this.endThumbTransformStyle ?
                '' :
                getComputedStyle(this).direction === 'rtl' ?
                    '' :
                    `calc(${(this.valueEnd - this.min) / (this.max - this.min) *
                        100}% - 24px)`, 'right': this.endThumbTransformStyle ?
                '' :
                getComputedStyle(this).direction !== 'rtl' ?
                    '' :
                    `calc(${(this.valueEnd - this.min) / (this.max - this.min) *
                        100}% - 24px)` }, this.endThumbCssProperties));
        const ripple = !this.shouldRenderEndRipple ?
            nothing :
            html `<mwc-ripple class="ripple" unbounded></mwc-ripple>`;
        return html `
      <div
          class="mdc-slider__thumb end ${endThumbClasses}"
          style=${endThumbStyles}
          @mouseenter=${this.onEndMouseenter}
          @mouseleave=${this.onEndMouseleave}>
        ${ripple}
        ${this.renderValueIndicator(this.valueToValueIndicatorTransform(this.valueEnd))}
        <div class="mdc-slider__thumb-knob"></div>
      </div>
    `;
    }
    renderValueIndicator(text) {
        return this.discrete ? html `
    <div class="mdc-slider__value-indicator-container" aria-hidden="true">
      <div class="mdc-slider__value-indicator">
        <span class="mdc-slider__value-indicator-text">
          ${text}
        </span>
      </div>
    </div>` :
            nothing;
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        if (this.mdcFoundation) {
            this.mdcFoundation.destroy();
        }
    }
    createAdapter() { }
    async firstUpdated() {
        super.firstUpdated();
        await this.layout(true);
    }
    updated(changed) {
        super.updated(changed);
        if (!this.mdcFoundation) {
            return;
        }
        if (changed.has('disabled')) {
            this.mdcFoundation.setDisabled(this.disabled);
        }
        if (changed.has('min')) {
            this.mdcFoundation.setMin(this.min);
        }
        if (changed.has('max')) {
            this.mdcFoundation.setMax(this.max);
        }
        if (changed.has('step')) {
            this.mdcFoundation.setStep(this.step);
        }
        if (changed.has('discrete')) {
            this.mdcFoundation.setIsDiscrete(this.discrete);
        }
        if (changed.has('withTickMarks')) {
            this.mdcFoundation.setHasTickMarks(this.withTickMarks);
        }
    }
    async layout(skipUpdateUI = false) {
        var _a;
        (_a = this.mdcFoundation) === null || _a === void 0 ? void 0 : _a.layout({ skipUpdateUI });
        this.requestUpdate();
        await this.updateComplete;
    }
    onEndChange(e) {
        var _a;
        this.valueEnd = Number(e.target.value);
        (_a = this.mdcFoundation) === null || _a === void 0 ? void 0 : _a.handleInputChange(Thumb.END);
    }
    onEndFocus() {
        var _a;
        (_a = this.mdcFoundation) === null || _a === void 0 ? void 0 : _a.handleInputFocus(Thumb.END);
        this.endRippleHandlers.startFocus();
    }
    onEndBlur() {
        var _a;
        (_a = this.mdcFoundation) === null || _a === void 0 ? void 0 : _a.handleInputBlur(Thumb.END);
        this.endRippleHandlers.endFocus();
    }
    onEndMouseenter() {
        var _a;
        (_a = this.mdcFoundation) === null || _a === void 0 ? void 0 : _a.handleThumbMouseenter();
        this.endRippleHandlers.startHover();
    }
    onEndMouseleave() {
        var _a;
        (_a = this.mdcFoundation) === null || _a === void 0 ? void 0 : _a.handleThumbMouseleave();
        this.endRippleHandlers.endHover();
    }
    onPointerdown(e) {
        this.layout();
        if (this.mdcFoundation) {
            this.mdcFoundation.handlePointerdown(e);
            this.boundMoveListener =
                this.mdcFoundation.handleMove.bind(this.mdcFoundation);
            this.mdcRoot.addEventListener('pointermove', this.boundMoveListener);
        }
    }
    onPointerup() {
        if (this.mdcFoundation) {
            this.mdcFoundation.handleUp();
            if (this.boundMoveListener) {
                this.mdcRoot.removeEventListener('pointermove', this.boundMoveListener);
                this.boundMoveListener = null;
            }
        }
    }
    onContextmenu(e) {
        // prevents context menu otherwise pointerdown will fire but not pointerup
        e.preventDefault();
    }
    setFormData(formData) {
        if (this.name) {
            formData.append(this.name, `${this.valueEnd}`);
        }
    }
}
__decorate([
    query('input.end')
], SliderBase.prototype, "formElement", void 0);
__decorate([
    query('.mdc-slider')
], SliderBase.prototype, "mdcRoot", void 0);
__decorate([
    query('.end.mdc-slider__thumb')
], SliderBase.prototype, "endThumb", void 0);
__decorate([
    query('.end.mdc-slider__thumb .mdc-slider__thumb-knob')
], SliderBase.prototype, "endThumbKnob", void 0);
__decorate([
    query('.end.mdc-slider__thumb .mdc-slider__value-indicator-container')
], SliderBase.prototype, "endValueIndicatorContainer", void 0);
__decorate([
    queryAsync('.end .ripple')
], SliderBase.prototype, "endRipple", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], SliderBase.prototype, "disabled", void 0);
__decorate([
    property({ type: Number })
], SliderBase.prototype, "min", void 0);
__decorate([
    property({ type: Number })
], SliderBase.prototype, "max", void 0);
__decorate([
    property({ type: Number })
], SliderBase.prototype, "valueEnd", void 0);
__decorate([
    property({ type: String })
], SliderBase.prototype, "name", void 0);
__decorate([
    property({ type: Number })
], SliderBase.prototype, "step", void 0);
__decorate([
    property({ type: Boolean })
], SliderBase.prototype, "withTickMarks", void 0);
__decorate([
    property({ type: Boolean })
], SliderBase.prototype, "discrete", void 0);
__decorate([
    state()
], SliderBase.prototype, "tickMarks", void 0);
__decorate([
    state()
], SliderBase.prototype, "trackTransformOriginStyle", void 0);
__decorate([
    state()
], SliderBase.prototype, "trackLeftStyle", void 0);
__decorate([
    state()
], SliderBase.prototype, "trackRightStyle", void 0);
__decorate([
    state()
], SliderBase.prototype, "trackTransitionStyle", void 0);
__decorate([
    state()
], SliderBase.prototype, "endThumbWithIndicator", void 0);
__decorate([
    state()
], SliderBase.prototype, "endThumbTop", void 0);
__decorate([
    state()
], SliderBase.prototype, "shouldRenderEndRipple", void 0);
__decorate([
    state()
], SliderBase.prototype, "endThumbTransformStyle", void 0);
__decorate([
    state()
], SliderBase.prototype, "endThumbTransitionStyle", void 0);
__decorate([
    state()
], SliderBase.prototype, "endThumbCssProperties", void 0);
__decorate([
    ariaProperty,
    property({ type: String, attribute: 'aria-label' })
], SliderBase.prototype, "ariaLabel", void 0);
__decorate([
    ariaProperty,
    property({ type: String, attribute: 'aria-labelledby' })
], SliderBase.prototype, "ariaLabelledBy", void 0);
__decorate([
    ariaProperty,
    property({ type: String, attribute: 'aria-describedby' })
], SliderBase.prototype, "ariaDescribedBy", void 0);
//# sourceMappingURL=slider-base.js.map